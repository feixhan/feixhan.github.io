<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FelixBlog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.crazyqq.com/"/>
  <updated>2019-03-30T12:33:56.877Z</updated>
  <id>http://www.crazyqq.com/</id>
  
  <author>
    <name>Felix</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简易Android OTA升级服务器端搭建</title>
    <link href="http://www.crazyqq.com/posts/19452/"/>
    <id>http://www.crazyqq.com/posts/19452/</id>
    <published>2019-03-30T12:28:16.000Z</published>
    <updated>2019-03-30T12:33:56.877Z</updated>
    
    <content type="html"><![CDATA[<h4 id="最近在写一个OTA服务器端程序，开源到了github，希望有兴趣的小伙伴一起完善。"><a href="#最近在写一个OTA服务器端程序，开源到了github，希望有兴趣的小伙伴一起完善。" class="headerlink" title="最近在写一个OTA服务器端程序，开源到了github，希望有兴趣的小伙伴一起完善。"></a>最近在写一个OTA服务器端程序，开源到了github，希望有兴趣的小伙伴一起完善。</h4><h2 id="GitHub地址"><a href="#GitHub地址" class="headerlink" title="GitHub地址"></a>GitHub地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/feixhan/OTAServer</span><br></pre></td></tr></table></figure><h2 id="Requirements"><a href="#Requirements" class="headerlink" title="Requirements"></a>Requirements</h2><ul><li>NodeJs + express</li><li>Mysql</li></ul><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">node bin/www</span><br></pre></td></tr></table></figure><p>文章为博主原创，转载请注明出处 <a href="http://www.crazyqq.com/posts/19452/">http://www.crazyqq.com/posts/19452/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;最近在写一个OTA服务器端程序，开源到了github，希望有兴趣的小伙伴一起完善。&quot;&gt;&lt;a href=&quot;#最近在写一个OTA服务器端程序，开源到了github，希望有兴趣的小伙伴一起完善。&quot; class=&quot;headerlink&quot; title=&quot;最近在写一个OTA服
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android OTA 全量包生成</title>
    <link href="http://www.crazyqq.com/posts/24580/"/>
    <id>http://www.crazyqq.com/posts/24580/</id>
    <published>2019-01-24T06:11:24.000Z</published>
    <updated>2019-02-10T03:53:59.543Z</updated>
    
    <content type="html"><![CDATA[<p>本文基于google的Android7.0代码</p><h5 id="google官方的介绍"><a href="#google官方的介绍" class="headerlink" title="google官方的介绍"></a>google官方的介绍</h5><pre><code>https://source.android.google.cn/devices/tech/ota</code></pre><p>示例：使用发布工具为假设的 tardis 设备构建完整更新：</p><pre><code># first, build the target-files .zip. build/envsetup.sh &amp;&amp; lunch tardis-engmkdir dist_outputmake dist DIST_DIR=dist_output</code></pre><p>target_files .zip 包含构建 OTA 软件包所需的所有内容。</p><pre><code>./build/tools/releasetools/ota_from_target_files dist_output/tardis-target_files.zip ota_update.zip</code></pre><h5 id="查看Makefile-基于Android7"><a href="#查看Makefile-基于Android7" class="headerlink" title="查看Makefile(基于Android7)"></a>查看Makefile(基于Android7)</h5><p>也可以使用make otapackage来生成ota升级包。</p><ul><li>删除$(zip_root),并重新建立$(zip_root)文件夹，$(zip_root)一般路径像这样：out/target/product/XXX/obj/PACKAGING/target_files_intermediates/XXX-target_files-20180601</li><li>建立$(zip_root)/RECOVERY 文件夹，并copy RAMDISK，kernel,cmdline,base等到RECOVERY下。</li><li>建立$(zip_root)/BOOT 文件夹，并copy TARGET_ROOT_OUT。</li><li>copy systemImage的内容到$(zip_root)/SYSTEM 文件夹。</li><li>copy dataImage的内容到$(zip_root)/DATA 文件夹。</li><li>copy vendorImage的内容到$(zip_root)/VENDOR 文件夹。</li><li>copy other Image</li><li>建立$(zip_root)/OTA 文件夹，将$(INSTALLED_ANDROID_INFO_TXT_TARGET) copy到OTA里。</li><li>建立$(zip_root)/META 文件夹，并copy相关内容，生成misc_info.txt。</li><li>打包$(zip_root)为zip文件夹。</li><li>执行 ./build/tools/releasetools/ota_from_target_files脚本，最终生成升级包。下面来分析一下 ./build/tools/releasetools/ota_from_target_files。</li></ul><p>代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br></pre></td><td class="code"><pre><span class="line"># Depending on the various images guarantees that the underlying</span><br><span class="line"># directories are up-to-date.</span><br><span class="line">$(BUILT_TARGET_FILES_PACKAGE): \</span><br><span class="line">$(INSTALLED_BOOTIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_RADIOIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_RECOVERYIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_SYSTEMIMAGE) \</span><br><span class="line">$(INSTALLED_USERDATAIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_CACHEIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_VENDORIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_SYSTEMOTHERIMAGE_TARGET) \</span><br><span class="line">$(INSTALLED_ANDROID_INFO_TXT_TARGET) \</span><br><span class="line">$(SELINUX_FC) \</span><br><span class="line">$(APKCERTS_FILE) \</span><br><span class="line">$(HOST_OUT_EXECUTABLES)/fs_config \</span><br><span class="line">| $(ACP)</span><br><span class="line">@echo &quot;Package target files: $@&quot;</span><br><span class="line">$(hide) rm -rf $@ $(zip_root)</span><br><span class="line">$(hide) mkdir -p $(dir $@) $(zip_root)</span><br><span class="line">ifneq (,$(INSTALLED_RECOVERYIMAGE_TARGET)$(filter true,$(BOARD_USES_RECOVERY_AS_BOOT)))</span><br><span class="line">@# Components of the recovery image</span><br><span class="line">$(hide) mkdir -p $(zip_root)/$(PRIVATE_RECOVERY_OUT)</span><br><span class="line">$(hide) $(call package_files-copy-root, \</span><br><span class="line">$(TARGET_RECOVERY_ROOT_OUT),$(zip_root)/$(PRIVATE_RECOVERY_OUT)/RAMDISK)</span><br><span class="line">ifdef INSTALLED_KERNEL_TARGET</span><br><span class="line">$(hide) $(ACP) $(INSTALLED_KERNEL_TARGET) $(zip_root)/$(PRIVATE_RECOVERY_OUT)/kernel</span><br><span class="line">endif</span><br><span class="line">ifdef INSTALLED_2NDBOOTLOADER_TARGET</span><br><span class="line">$(hide) $(ACP) \</span><br><span class="line">$(INSTALLED_2NDBOOTLOADER_TARGET) $(zip_root)/$(PRIVATE_RECOVERY_OUT)/second</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_KERNEL_CMDLINE</span><br><span class="line">$(hide) echo &quot;$(BOARD_KERNEL_CMDLINE)&quot; &gt; $(zip_root)/$(PRIVATE_RECOVERY_OUT)/cmdline</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_KERNEL_BASE</span><br><span class="line">$(hide) echo &quot;$(BOARD_KERNEL_BASE)&quot; &gt; $(zip_root)/$(PRIVATE_RECOVERY_OUT)/base</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_KERNEL_PAGESIZE</span><br><span class="line">$(hide) echo &quot;$(BOARD_KERNEL_PAGESIZE)&quot; &gt; $(zip_root)/$(PRIVATE_RECOVERY_OUT)/pagesize</span><br><span class="line">endif</span><br><span class="line">endif # INSTALLED_RECOVERYIMAGE_TARGET defined or BOARD_USES_RECOVERY_AS_BOOT is true</span><br><span class="line">ifdef BOARD_KERNEL_DTS</span><br><span class="line">$(hide) echo &quot;$(BOARD_KERNEL_DTS)&quot; &gt; $(zip_root)/RECOVERY/dtb</span><br><span class="line">endif</span><br><span class="line">@# Components of the boot image</span><br><span class="line">$(hide) mkdir -p $(zip_root)/BOOT</span><br><span class="line">ifeq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)</span><br><span class="line">$(hide) mkdir -p $(zip_root)/ROOT</span><br><span class="line">$(hide) $(call package_files-copy-root, \</span><br><span class="line">$(TARGET_ROOT_OUT),$(zip_root)/ROOT)</span><br><span class="line">else</span><br><span class="line">$(hide) $(call package_files-copy-root, \</span><br><span class="line">$(TARGET_ROOT_OUT),$(zip_root)/BOOT/RAMDISK)</span><br><span class="line">endif</span><br><span class="line">@# If we are using recovery as boot, this is already done when processing recovery.</span><br><span class="line">ifneq ($(BOARD_USES_RECOVERY_AS_BOOT),true)</span><br><span class="line">ifdef INSTALLED_KERNEL_TARGET</span><br><span class="line">$(hide) $(ACP) $(INSTALLED_KERNEL_TARGET) $(zip_root)/BOOT/kernel</span><br><span class="line">endif</span><br><span class="line">ifdef INSTALLED_2NDBOOTLOADER_TARGET</span><br><span class="line">$(hide) $(ACP) \</span><br><span class="line">$(INSTALLED_2NDBOOTLOADER_TARGET) $(zip_root)/BOOT/second</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_KERNEL_CMDLINE</span><br><span class="line">$(hide) echo &quot;$(BOARD_KERNEL_CMDLINE)&quot; &gt; $(zip_root)/BOOT/cmdline</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_KERNEL_BASE</span><br><span class="line">$(hide) echo &quot;$(BOARD_KERNEL_BASE)&quot; &gt; $(zip_root)/BOOT/base</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_KERNEL_PAGESIZE</span><br><span class="line">$(hide) echo &quot;$(BOARD_KERNEL_PAGESIZE)&quot; &gt; $(zip_root)/BOOT/pagesize</span><br><span class="line">endif</span><br><span class="line">endif # BOARD_USES_RECOVERY_AS_BOOT</span><br><span class="line">ifdef BOARD_KERNEL_DTS</span><br><span class="line">$(hide) echo &quot;$(BOARD_KERNEL_DTS)&quot; &gt; $(zip_root)/BOOT/dtb</span><br><span class="line">endif</span><br><span class="line">ifdef DTS_PLATFORM</span><br><span class="line">$(hide) mkdir -p $(zip_root)/RADIO;</span><br><span class="line">$(hide) $(ACP) $(PRODUCT_OUT)/u-boot-$(DTS_PLATFORM).imx $(zip_root)/RADIO/bootloader.img</span><br><span class="line">endif</span><br><span class="line">$(hide) $(foreach t,$(INSTALLED_RADIOIMAGE_TARGET),\</span><br><span class="line">            mkdir -p $(zip_root)/RADIO; \</span><br><span class="line">    echo &quot;INSTALLED_RADIOIMAGE_TARGET *******&quot;;\</span><br><span class="line">            $(ACP) $(t) $(zip_root)/RADIO/$(notdir $(t));)</span><br><span class="line">@# Contents of the system image</span><br><span class="line">$(hide) $(call package_files-copy-root, \</span><br><span class="line">$(SYSTEMIMAGE_SOURCE_DIR),$(zip_root)/SYSTEM)</span><br><span class="line">@# Contents of the data image</span><br><span class="line">$(hide) $(call package_files-copy-root, \</span><br><span class="line">$(TARGET_OUT_DATA),$(zip_root)/DATA)</span><br><span class="line">ifdef BOARD_VENDORIMAGE_FILE_SYSTEM_TYPE</span><br><span class="line">@# Contents of the vendor image</span><br><span class="line">$(hide) $(call package_files-copy-root, \</span><br><span class="line">$(TARGET_OUT_VENDOR),$(zip_root)/VENDOR)</span><br><span class="line">endif</span><br><span class="line">ifdef INSTALLED_SYSTEMOTHERIMAGE_TARGET</span><br><span class="line">@# Contents of the system_other image</span><br><span class="line">$(hide) $(call package_files-copy-root, \</span><br><span class="line">$(TARGET_OUT_SYSTEM_OTHER),$(zip_root)/SYSTEM_OTHER)</span><br><span class="line">endif</span><br><span class="line">@# Extra contents of the OTA package</span><br><span class="line">$(hide) mkdir -p $(zip_root)/OTA</span><br><span class="line">$(hide) $(ACP) $(INSTALLED_ANDROID_INFO_TXT_TARGET) $(zip_root)/OTA/</span><br><span class="line">ifneq ($(AB_OTA_UPDATER),true)</span><br><span class="line">ifneq ($(built_ota_tools),)</span><br><span class="line">$(hide) mkdir -p $(zip_root)/OTA/bin</span><br><span class="line">$(hide) $(ACP) $(PRIVATE_OTA_TOOLS) $(zip_root)/OTA/bin/</span><br><span class="line">endif</span><br><span class="line">endif</span><br><span class="line">@# Files that do not end up in any images, but are necessary to</span><br><span class="line">@# build them.</span><br><span class="line">$(hide) mkdir -p $(zip_root)/META</span><br><span class="line">$(hide) $(ACP) $(APKCERTS_FILE) $(zip_root)/META/apkcerts.txt</span><br><span class="line">$(hide) if test -e $(tool_extensions)/releasetools.py; then $(ACP) $(tool_extensions)/releasetools.py $(zip_root)/META/; fi</span><br><span class="line">$(hide) echo &quot;$(PRODUCT_OTA_PUBLIC_KEYS)&quot; &gt; $(zip_root)/META/otakeys.txt</span><br><span class="line">$(hide) $(ACP) $(SELINUX_FC) $(zip_root)/META/file_contexts.bin</span><br><span class="line">$(hide) echo &quot;recovery_api_version=$(PRIVATE_RECOVERY_API_VERSION)&quot; &gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">$(hide) echo &quot;fstab_version=$(PRIVATE_RECOVERY_FSTAB_VERSION)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">ifdef BOARD_FLASH_BLOCK_SIZE</span><br><span class="line">$(hide) echo &quot;blocksize=$(BOARD_FLASH_BLOCK_SIZE)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_BOOTIMAGE_PARTITION_SIZE</span><br><span class="line">$(hide) echo &quot;boot_size=$(BOARD_BOOTIMAGE_PARTITION_SIZE)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">ifeq ($(BOARD_USES_RECOVERY_AS_BOOT),)</span><br><span class="line">$(hide) echo &quot;recovery_as_boot=$(BOARD_USES_RECOVERY_AS_BOOT)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">ifeq ($(INSTALLED_RECOVERYIMAGE_TARGET),)</span><br><span class="line">$(hide) echo &quot;no_recovery=true&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_RECOVERYIMAGE_PARTITION_SIZE</span><br><span class="line">$(hide) echo &quot;recovery_size=$(BOARD_RECOVERYIMAGE_PARTITION_SIZE)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_HAS_EXT4_RESERVED_BLOCKS</span><br><span class="line">$(hide) echo &quot;has_ext4_reserved_blocks=$(BOARD_HAS_EXT4_RESERVED_BLOCKS)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">ifdef TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS</span><br><span class="line">@# TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS can be empty to indicate that nothing but defaults should be used.</span><br><span class="line">$(hide) echo &quot;recovery_mount_options=$(TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">else</span><br><span class="line">$(hide) echo &quot;recovery_mount_options=$(DEFAULT_TARGET_RECOVERY_FSTYPE_MOUNT_OPTIONS)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">$(hide) echo &quot;tool_extensions=$(tool_extensions)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">$(hide) echo &quot;default_system_dev_certificate=$(DEFAULT_SYSTEM_DEV_CERTIFICATE)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">ifdef PRODUCT_EXTRA_RECOVERY_KEYS</span><br><span class="line">$(hide) echo &quot;extra_recovery_keys=$(PRODUCT_EXTRA_RECOVERY_KEYS)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">$(hide) echo &apos;mkbootimg_args=$(BOARD_MKBOOTIMG_ARGS)&apos; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">$(hide) echo &apos;mkbootimg_version_args=$(INTERNAL_MKBOOTIMG_VERSION_ARGS)&apos; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">$(hide) echo &quot;use_set_metadata=1&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">$(hide) echo &quot;multistage_support=1&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">$(hide) echo &quot;update_rename_support=1&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">$(hide) echo &quot;blockimgdiff_versions=1,2,3,4&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">ifneq ($(OEM_THUMBPRINT_PROPERTIES),)</span><br><span class="line"># OTA scripts are only interested in fingerprint related properties</span><br><span class="line">$(hide) echo &quot;oem_fingerprint_properties=$(OEM_THUMBPRINT_PROPERTIES)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">ifneq ($(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_BASE_FS_PATH),)</span><br><span class="line">$(hide) $(ACP) $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_BASE_FS_PATH) \</span><br><span class="line">  $(zip_root)/META/$(notdir $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_SYSTEM_BASE_FS_PATH))</span><br><span class="line">endif</span><br><span class="line">ifneq ($(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_BASE_FS_PATH),)</span><br><span class="line">$(hide) $(ACP) $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_BASE_FS_PATH) \</span><br><span class="line">  $(zip_root)/META/$(notdir $(PRODUCTS.$(INTERNAL_PRODUCT).PRODUCT_VENDOR_BASE_FS_PATH))</span><br><span class="line">endif</span><br><span class="line">ifneq ($(strip $(SANITIZE_TARGET)),)</span><br><span class="line"># We need to create userdata.img with real data because the instrumented libraries are in userdata.img.</span><br><span class="line">$(hide) echo &quot;userdata_img_with_data=true&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">ifeq ($(BOARD_USES_FULL_RECOVERY_IMAGE),true)</span><br><span class="line">$(hide) echo &quot;full_recovery_image=true&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">endif</span><br><span class="line">$(call generate-userimage-prop-dictionary, $(zip_root)/META/misc_info.txt)</span><br><span class="line">ifneq ($(INSTALLED_RECOVERYIMAGE_TARGET),)</span><br><span class="line">$(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH MKBOOTIMG=$(MKBOOTIMG) \</span><br><span class="line">    ./build/tools/releasetools/make_recovery_patch $(zip_root) $(zip_root)</span><br><span class="line">endif</span><br><span class="line">ifeq ($(AB_OTA_UPDATER),true)</span><br><span class="line">@# When using the A/B updater, include the updater config files in the zip.</span><br><span class="line">$(hide) $(ACP) $(TOPDIR)system/update_engine/update_engine.conf $(zip_root)/META/update_engine_config.txt</span><br><span class="line">$(hide) for part in $(AB_OTA_PARTITIONS); do \</span><br><span class="line">  echo &quot;$$&#123;part&#125;&quot; &gt;&gt; $(zip_root)/META/ab_partitions.txt; \</span><br><span class="line">done</span><br><span class="line">$(hide) for conf in $(AB_OTA_POSTINSTALL_CONFIG); do \</span><br><span class="line">  echo &quot;$$&#123;conf&#125;&quot; &gt;&gt; $(zip_root)/META/postinstall_config.txt; \</span><br><span class="line">done</span><br><span class="line">@# Include the build type in META/misc_info.txt so the server can easily differentiate production builds.</span><br><span class="line">$(hide) echo &quot;build_type=$(TARGET_BUILD_VARIANT)&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">$(hide) echo &quot;ab_update=true&quot; &gt;&gt; $(zip_root)/META/misc_info.txt</span><br><span class="line">ifdef OSRELEASED_DIRECTORY</span><br><span class="line">$(hide) $(ACP) $(TARGET_OUT_ETC)/$(OSRELEASED_DIRECTORY)/product_id $(zip_root)/META/product_id.txt</span><br><span class="line">$(hide) $(ACP) $(TARGET_OUT_ETC)/$(OSRELEASED_DIRECTORY)/product_version $(zip_root)/META/product_version.txt</span><br><span class="line">endif</span><br><span class="line">endif</span><br><span class="line">ifeq ($(BREAKPAD_GENERATE_SYMBOLS),true)</span><br><span class="line">@# If breakpad symbols have been generated, add them to the zip.</span><br><span class="line">$(hide) $(ACP) -r $(TARGET_OUT_BREAKPAD) $(zip_root)/BREAKPAD</span><br><span class="line">endif</span><br><span class="line">ifdef BOARD_PREBUILT_VENDORIMAGE</span><br><span class="line">$(hide) mkdir -p $(zip_root)/IMAGES</span><br><span class="line">$(hide) cp $(INSTALLED_VENDORIMAGE_TARGET) $(zip_root)/IMAGES/</span><br><span class="line">endif</span><br><span class="line">@# Zip everything up, preserving symlinks and placing META/ files first to</span><br><span class="line">@# help early validation of the .zip file while uploading it.</span><br><span class="line">$(hide) (cd $(zip_root) &amp;&amp; \</span><br><span class="line">        zip -qryX ../$(notdir $@) ./META &amp;&amp; \</span><br><span class="line">        zip -qryXu ../$(notdir $@) .)</span><br><span class="line">@# Run fs_config on all the system, vendor, boot ramdisk,</span><br><span class="line">@# and recovery ramdisk files in the zip, and save the output</span><br><span class="line">$(hide) zipinfo -1 $@ | awk &apos;BEGIN &#123; FS=&quot;SYSTEM/&quot; &#125; /^SYSTEM\// &#123;print &quot;system/&quot; $$2&#125;&apos; | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) &gt; $(zip_root)/META/filesystem_config.txt</span><br><span class="line">$(hide) zipinfo -1 $@ | awk &apos;BEGIN &#123; FS=&quot;VENDOR/&quot; &#125; /^VENDOR\// &#123;print &quot;vendor/&quot; $$2&#125;&apos; | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) &gt; $(zip_root)/META/vendor_filesystem_config.txt</span><br><span class="line">ifeq ($(BOARD_BUILD_SYSTEM_ROOT_IMAGE),true)</span><br><span class="line">$(hide) zipinfo -1 $@ | awk &apos;BEGIN &#123; FS=&quot;ROOT/&quot; &#125; /^ROOT\// &#123;print $$2&#125;&apos; | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) &gt; $(zip_root)/META/root_filesystem_config.txt</span><br><span class="line">endif</span><br><span class="line">$(hide) zipinfo -1 $@ | awk &apos;BEGIN &#123; FS=&quot;BOOT/RAMDISK/&quot; &#125; /^BOOT\/RAMDISK\// &#123;print $$2&#125;&apos; | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) &gt; $(zip_root)/META/boot_filesystem_config.txt</span><br><span class="line">ifneq ($(INSTALLED_RECOVERYIMAGE_TARGET),)</span><br><span class="line">$(hide) zipinfo -1 $@ | awk &apos;BEGIN &#123; FS=&quot;RECOVERY/RAMDISK/&quot; &#125; /^RECOVERY\/RAMDISK\// &#123;print $$2&#125;&apos; | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) &gt; $(zip_root)/META/recovery_filesystem_config.txt</span><br><span class="line">endif</span><br><span class="line">ifdef INSTALLED_SYSTEMOTHERIMAGE_TARGET</span><br><span class="line">$(hide) zipinfo -1 $@ | awk &apos;BEGIN &#123; FS=&quot;SYSTEM_OTHER/&quot; &#125; /^SYSTEM_OTHER\// &#123; print &quot;system/&quot; $$2&#125;&apos; | $(HOST_OUT_EXECUTABLES)/fs_config -C -D $(TARGET_OUT) -S $(SELINUX_FC) &gt; $(zip_root)/META/system_other_filesystem_config.txt</span><br><span class="line">endif</span><br><span class="line">$(hide) (cd $(zip_root) &amp;&amp; zip -qX ../$(notdir $@) META/*filesystem_config.txt)</span><br><span class="line">$(hide) PATH=$(foreach p,$(INTERNAL_USERIMAGES_BINARY_PATHS),$(p):)$$PATH MKBOOTIMG=$(MKBOOTIMG) \</span><br><span class="line">    ./build/tools/releasetools/add_img_to_target_files -a -v -p $(HOST_OUT) $@</span><br></pre></td></tr></table></figure><p>文章为博主原创，转载请注明出处 <a href="http://www.crazyqq.com/posts/24580/">http://www.crazyqq.com/posts/24580/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文基于google的Android7.0代码&lt;/p&gt;
&lt;h5 id=&quot;google官方的介绍&quot;&gt;&lt;a href=&quot;#google官方的介绍&quot; class=&quot;headerlink&quot; title=&quot;google官方的介绍&quot;&gt;&lt;/a&gt;google官方的介绍&lt;/h5&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android AMS 初始化</title>
    <link href="http://www.crazyqq.com/posts/62720/"/>
    <id>http://www.crazyqq.com/posts/62720/</id>
    <published>2018-06-02T03:17:58.000Z</published>
    <updated>2019-02-10T03:53:59.552Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Android-AMS-初始化"><a href="#Android-AMS-初始化" class="headerlink" title="Android AMS 初始化"></a>Android AMS 初始化</h5><p>本文基于Android7.</p><p>我们已经知道了，zygote创建出的第一个java进程是SystemServer。<br>在SystemServer的run函数中，在启动AMS之前，调用了createSystemContext函数。<br>frameworks/base/services/java/com/android/server/SystemServer.java<br>createSystemContext函数很简单:</p><pre><code>408     private void createSystemContext() {                //调用ActivityThread的systemMain函数，其中会创建出系统对应的Context对象409         ActivityThread activityThread = ActivityThread.systemMain();               //取出上面函数创建的Context对象，保存在mSystemContext中410         mSystemContext = activityThread.getSystemContext();               //设置系统主题411         mSystemContext.setTheme(DEFAULT_SYSTEM_THEME);412     }</code></pre><p>以上函数中，最重要的就是ActivityThread.systemMain了，我们分析一下该函数。</p><pre><code>6053     public static ActivityThread systemMain() {6054         // The system process on low-memory devices do not get to use hardware6055         // accelerated drawing, since this can add too much overhead to the6056         // process.               6057         if (!ActivityManager.isHighEndGfx()) {                           //对于低内存的设备，关闭硬件渲染功能6058             ThreadedRenderer.disable(true);6059         } else {                  6060             ThreadedRenderer.enableForegroundTrimming();6061         }                // 创建ActivityThread6062         ActivityThread thread = new ActivityThread();6063         thread.attach(true);            6064         return thread;                                  6065     } 2035     ActivityThread() {                //ActivityThread 构造很简单，取得ResourcesManager的实例。2036         mResourcesManager = ResourcesManager.getInstance();     2037     }</code></pre><p>先来了解下ActivityThread几个关键的成员变量：</p><pre><code>//定义了AMS与应用通信的接口final ApplicationThread mAppThread = new ApplicationThread();//拥有自己的looper，说明ActivityThread确实可以代表事件处理线程final Looper mLooper = Looper.myLooper();//H继承Handler，ActivityThread中大量事件处理依赖此Handlerfinal H mH = new H();//用于保存该进程的ActivityRecordfinal ArrayMap&lt;IBinder, ActivityClientRecord&gt; mActivities = new ArrayMap&lt;&gt;()//用于保存进程中的Servicefinal ArrayMap&lt;IBinder, Service&gt; mServices = new ArrayMap&lt;&gt;();//用于保存进程中的Applicationfinal ArrayList&lt;Application&gt; mAllApplications = new ArrayList&lt;Application&gt;();</code></pre><p>再全看attach函数</p><pre><code>5961     private void attach(boolean system) {          //保存当前实例的this指针5962         sCurrentActivityThread = this;          //当前实例是否是syste实例5963         mSystemThread = system;                //application 的实例5964         if (!system) {5965         } else {5966             // Don&apos;t set application object here -- if the system crashes,5967             // we can&apos;t display an alert, we just want to die die die. //设置DDMS(Dalvik Debug Monitor Service)中看到的SystemServer进程的名称为“system_process”5968             android.ddm.DdmHandleAppName.setAppName(&quot;system_process&quot;,5969                     UserHandle.myUserId());5970             try { //创建ActivityThread中的重要成员：Instrumentation、Application和Context5971                 mInstrumentation = new Instrumentation();5972                 ContextImpl context = ContextImpl.createAppContext(5973                         this, getSystemContext().mPackageInfo);5974                 mInitialApplication = context.mPackageInfo.makeApplication(true, null);5975                 mInitialApplication.onCreate();5976             } catch (Exception e) {5977                 throw new RuntimeException(5978                         &quot;Unable to instantiate Application():&quot; + e.toString(), e);5979             }5980         }5981          5982         // add dropbox logging to libcore5983         DropBox.setReporter(new DropBoxReporter());5984           //注册Configuration变化的回调通知5985         ViewRootImpl.addConfigCallback(new ComponentCallbacks2() {5986             @Override5987             public void onConfigurationChanged(Configuration newConfig) { //当系统配置发生变化时（例如系统语言发生变化），回调该接口5988                 synchronized (mResourcesManager) {5989                     // We need to apply this change to the resources5990                     // immediately, because upon returning the view5991                     // hierarchy will be informed about it.5992                     if (mResourcesManager.applyConfigurationToResourcesLocked(newConfig, null)) {5993                         updateLocaleListFromAppContext(mInitialApplication.getApplicationContext(),5994                                 mResourcesManager.getConfiguration().getLocales());5995          5996                         // This actually changed the resources!  Tell5997                         // everyone about it.5998                         if (mPendingConfiguration == null ||5999                                 mPendingConfiguration.isOtherSeqNewer(newConfig)) {6000                             mPendingConfiguration = newConfig;6001          6002                             sendMessage(H.CONFIGURATION_CHANGED, newConfig);6003                         }6004                     }6005                 }6006             }</code></pre><p>可见ActivityThread的主要工作是创建了Instrumentation、Application和Context。</p><p>文章为博主原创，转载请注明出处 <a href="http://www.crazyqq.com/posts/62720/">http://www.crazyqq.com/posts/62720/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Android-AMS-初始化&quot;&gt;&lt;a href=&quot;#Android-AMS-初始化&quot; class=&quot;headerlink&quot; title=&quot;Android AMS 初始化&quot;&gt;&lt;/a&gt;Android AMS 初始化&lt;/h5&gt;&lt;p&gt;本文基于Android7.&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Deep learning note 2</title>
    <link href="http://www.crazyqq.com/posts/58745/"/>
    <id>http://www.crazyqq.com/posts/58745/</id>
    <published>2018-05-20T08:36:53.000Z</published>
    <updated>2019-02-10T03:53:59.546Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Logistic-Regession损失函数"><a href="#Logistic-Regession损失函数" class="headerlink" title="Logistic Regession损失函数"></a>Logistic Regession损失函数</h5><p>首先Logistic Regession函数：</p><p><img src="/posts/58745/logstic.png" alt=""></p><h6 id="损失函数："><a href="#损失函数：" class="headerlink" title="损失函数："></a>损失函数：</h6><p><img src="/posts/58745/loss.png" alt=""></p><h6 id="损失函数L"><a href="#损失函数L" class="headerlink" title="损失函数L"></a>损失函数L</h6><ul><li>当y=1时，我们要使y hat尽可能大，但这是由sigmoid函数估计出来的值，不会超过1，所以要尽可能接近1</li><li>当y=0时，要使y hat尽可能小，但是不会小于0，所以尽可能接近0。</li></ul><p>文章为博主原创，转载请注明出处 <a href="http://www.crazyqq.com/posts/58745/">http://www.crazyqq.com/posts/58745/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Logistic-Regession损失函数&quot;&gt;&lt;a href=&quot;#Logistic-Regession损失函数&quot; class=&quot;headerlink&quot; title=&quot;Logistic Regession损失函数&quot;&gt;&lt;/a&gt;Logistic Regession损失
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Deep learning note 1</title>
    <link href="http://www.crazyqq.com/posts/34984/"/>
    <id>http://www.crazyqq.com/posts/34984/</id>
    <published>2018-05-14T12:57:27.000Z</published>
    <updated>2019-02-10T03:53:59.543Z</updated>
    
    <content type="html"><![CDATA[<p>本文为吴恩达《神经网络和深度学习》课程的读书笔记。</p><h5 id="1-Supervised-Learning-with-Neural-Networks"><a href="#1-Supervised-Learning-with-Neural-Networks" class="headerlink" title="1.Supervised Learning with Neural Networks"></a>1.Supervised Learning with Neural Networks</h5><ul><li>Standard NN(neual network)  适用于广告等</li><li>CNN(convolutional neual network) 适用于图像识别</li><li>RNN(recurrent neual network) 适用与声音识别，文字识别等<br><img src="/posts/34984/deep-learn-type.png" alt=""></li></ul><h5 id="2-Logistic-Regession"><a href="#2-Logistic-Regession" class="headerlink" title="2.Logistic Regession"></a>2.Logistic Regession</h5><h6 id="2-1-Sigmoid-function"><a href="#2-1-Sigmoid-function" class="headerlink" title="2.1 Sigmoid function"></a>2.1 Sigmoid function</h6><p><img src="/posts/34984/sigmoid.png" alt=""></p><pre><code>def  sigmoid(x):    return 1.0 / (1.0 + np.exp(-x)) </code></pre><h6 id="2-2-Sigmoid-gradient"><a href="#2-2-Sigmoid-gradient" class="headerlink" title="2.2 Sigmoid gradient"></a>2.2 Sigmoid gradient</h6><pre><code>y = sigmoid(x) * (1 - sigmoid(x))</code></pre><p><img src="/posts/34984/sigmoid_derivative.png" alt=""></p><h5 id="2-3-python-code"><a href="#2-3-python-code" class="headerlink" title="2.3 python code"></a>2.3 python code</h5><pre><code>#!/usr/bin/pythonimport matplotlib.pyplot as pltimport numpy as np#define sigmoid funciondef  sigmoid(x):    return 1.0 / (1.0 + np.exp(-x))#define sigmoid derivative functiondef sigmoid_derivative(x):    return sigmoid(x) * (1 - sigmoid(x))#get x from -10 to 10x = np.linspace(-10, 10)#get sigmoid(x)y = sigmoid(x)#get sigmoid derivative(x)z = sigmoid_derivative(x)#draw sigmoidplt.plot(x,y,label=&quot;Sigmoid&quot;,color = &quot;blue&quot;)#draw sigmoid derivativeplt.plot(x,z,label=&quot;Sigmoid derivative&quot;,color = &quot;red&quot;)#showplt.show()</code></pre><p>文章为博主原创，转载请注明出处 <a href="http://www.crazyqq.com/posts/34984/">http://www.crazyqq.com/posts/34984/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文为吴恩达《神经网络和深度学习》课程的读书笔记。&lt;/p&gt;
&lt;h5 id=&quot;1-Supervised-Learning-with-Neural-Networks&quot;&gt;&lt;a href=&quot;#1-Supervised-Learning-with-Neural-Networks&quot; c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>初识Fuchsia</title>
    <link href="http://www.crazyqq.com/posts/43754/"/>
    <id>http://www.crazyqq.com/posts/43754/</id>
    <published>2018-05-13T07:14:00.000Z</published>
    <updated>2019-02-10T03:53:59.548Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-取代码"><a href="#1-取代码" class="headerlink" title="1.取代码"></a>1.取代码</h3><h4 id="1-1-代码"><a href="#1-1-代码" class="headerlink" title="1.1.代码"></a>1.1.代码</h4><p>代码位置<br>官方<a href="https://fuchsia.googlesource.com/" target="_blank" rel="noopener">https://fuchsia.googlesource.com/</a></p><pre><code>curl -s &quot;https://fuchsia.googlesource.com/scripts/+/master/bootstrap?format=TEXT&quot; | base64 --decode | bash -s &lt;layer&gt;</code></pre><p>不能科学上网的，可以使用github的镜像。</p><pre><code>https://github.com/fuchsia-mirror</code></pre><h4 id="1-2-说明"><a href="#1-2-说明" class="headerlink" title="1.2.说明"></a>1.2.说明</h4><p>layer有如下几个可选项，使用Topaz会包含所有的layer：</p><ul><li>Zircon Garnet Peridot Topaz</li><li>Zircon 微内核</li><li>Garnet 软件管理等系统级服务</li><li>Peridot Peridot提供所需的服务，以创建由模块、情节、代理、实体和其他组件组成的汇聚可定制的多设备用户体验。</li><li>Topaz 通过实现底层定义的接口来增强系统功能。Topaz包含四个主要类别的软件：module，agent，shell和runner。</li></ul><h3 id="2-Fuchsia一些技术"><a href="#2-Fuchsia一些技术" class="headerlink" title="2.Fuchsia一些技术"></a>2.Fuchsia一些技术</h3><ul><li>jiri编译及管理git仓库</li><li>微内核Zircon</li><li>新的进程间通信接口描述方式FIDL</li><li>进程沙箱</li><li>NameSpaces(文件管理与服务发现)</li><li>Story (root application的逻辑容器)</li></ul><h3 id="3-开源的UI开发环境Flutter"><a href="#3-开源的UI开发环境Flutter" class="headerlink" title="3.开源的UI开发环境Flutter"></a>3.开源的UI开发环境Flutter</h3><h4 id="3-1官网"><a href="#3-1官网" class="headerlink" title="3.1官网"></a>3.1官网</h4><pre><code>https://flutter.io/</code></pre><h4 id="3-2-黑科技"><a href="#3-2-黑科技" class="headerlink" title="3.2 黑科技"></a>3.2 黑科技</h4><ul><li>支持导出 Android iOS 和 Fuchsia 三个平台的安装包</li><li>Hot Reload (修改UI后，无需重新启动程序)</li></ul><h4 id="3-3-Flutter架构"><a href="#3-3-Flutter架构" class="headerlink" title="3.3 Flutter架构"></a>3.3 Flutter架构</h4><p><img src="/posts/43754/flutter.png" alt="架构图"></p><p>文章为博主原创，转载请注明出处 <a href="http://www.crazyqq.com/posts/43754/">http://www.crazyqq.com/posts/43754/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-取代码&quot;&gt;&lt;a href=&quot;#1-取代码&quot; class=&quot;headerlink&quot; title=&quot;1.取代码&quot;&gt;&lt;/a&gt;1.取代码&lt;/h3&gt;&lt;h4 id=&quot;1-1-代码&quot;&gt;&lt;a href=&quot;#1-1-代码&quot; class=&quot;headerlink&quot; title=&quot;1
      
    
    </summary>
    
    
      <category term="fuchsia" scheme="http://www.crazyqq.com/tags/fuchsia/"/>
    
  </entry>
  
  <entry>
    <title>ddns</title>
    <link href="http://www.crazyqq.com/posts/27187/"/>
    <id>http://www.crazyqq.com/posts/27187/</id>
    <published>2018-05-13T07:09:00.000Z</published>
    <updated>2019-02-10T03:53:59.552Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、前提"><a href="#一、前提" class="headerlink" title="一、前提"></a>一、前提</h3><ul><li>阿里云的域名一枚</li></ul><p>说下家里的情况，电信光纤，有外网ip，不过是动态的。<br>为了方便在外访问家里的资源，动态域名解析就很有必要。</p><ul><li>原理：使用阿里开放的SDK来动态修改域名的DNS解析记录。</li></ul><p>附阿里SDK手册:</p><pre><code>https://help.aliyun.com/document_detail/29821.html</code></pre><h3 id="二、设置阿里云访问控制"><a href="#二、设置阿里云访问控制" class="headerlink" title="二、设置阿里云访问控制"></a>二、设置阿里云访问控制</h3><p>&emsp;&emsp;根据权限最小化的原则，在访问控制台单独创建一个用户，只分配修改DNS解析的权限。记录好AccessKey与Secret。</p><p><img src="/posts/27187/aliyunUser.png" alt="控制设置"></p><h3 id="三、使用python脚本修改ddns"><a href="#三、使用python脚本修改ddns" class="headerlink" title="三、使用python脚本修改ddns"></a>三、使用python脚本修改ddns</h3><p>github上有已经实现好的，直接拿来用就行。</p><pre><code>https://github.com/rfancn/aliyun-ddns-clientgit clone https://github.com/rfancn/aliyun-ddns-client.gitcd aliyun-ddns-clientpip install requests</code></pre><p>这个代码默认配置文件是在/etc/ddns.conf，我这里把它修改为当前目录。</p><pre><code>cp ddns.conf.example  ddns.conf</code></pre><p>按照github中修改配置文件后，运行下试试</p><pre><code>2018-05-05 14:35:22    [INFO]    Successfully updated DomainRecord[home.hanfei.pub]</code></pre><p>查看解析结果，与解析日志</p><pre><code>2018-05-05 14:35:39    修改解析记录A记录 home 默认 101.229.23.239 ( TTL: 600, 权重: 1) 改为 A记录 home 默认 101.80.129.150 (TTL:600, 权重: 1)</code></pre><p>OK，设置定时运行，每5分钟一次</p><p>文章为博主原创，转载请注明出处 <a href="http://www.crazyqq.com/posts/27187/">http://www.crazyqq.com/posts/27187/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、前提&quot;&gt;&lt;a href=&quot;#一、前提&quot; class=&quot;headerlink&quot; title=&quot;一、前提&quot;&gt;&lt;/a&gt;一、前提&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;阿里云的域名一枚&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;说下家里的情况，电信光纤，有外网ip，不过是动态的。&lt;br&gt;为了方
      
    
    </summary>
    
    
      <category term="ddns" scheme="http://www.crazyqq.com/tags/ddns/"/>
    
  </entry>
  
  <entry>
    <title>博客复活了</title>
    <link href="http://www.crazyqq.com/posts/16107/"/>
    <id>http://www.crazyqq.com/posts/16107/</id>
    <published>2018-05-13T07:08:00.000Z</published>
    <updated>2019-02-10T03:53:59.554Z</updated>
    
    <content type="html"><![CDATA[<pre><code>好久没写博客了，以前wp的博客内容也都丢了。这次尝试使用Hexo，Hexo非常简洁，可以同步到github上，就不用担心数据丢失了，顺便熟悉使用下Markdown语法。</code></pre><p>文章为博主原创，转载请注明出处 <a href="http://www.crazyqq.com/posts/16107/">http://www.crazyqq.com/posts/16107/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;好久没写博客了，以前wp的博客内容也都丢了。这次尝试使用Hexo，Hexo非常简洁，可以同步到github上，就不用担心数据丢失了，顺便熟悉使用下Markdown语法。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;文章为博主原创，转载请注明出处 &lt;a href=&quot;htt
      
    
    </summary>
    
    
      <category term="essay" scheme="http://www.crazyqq.com/tags/essay/"/>
    
  </entry>
  
  <entry>
    <title>FIDL: 概述</title>
    <link href="http://www.crazyqq.com/posts/1/"/>
    <id>http://www.crazyqq.com/posts/1/</id>
    <published>2018-05-06T13:10:00.000Z</published>
    <updated>2019-02-10T03:53:59.554Z</updated>
    
    <content type="html"><![CDATA[<hr><p><a href="https://github.com/fuchsia-mirror/zircon/blob/00faaac908ed4c5a59bfab95b6831b33df6a5cb0/docs/fidl/index.md" target="_blank" rel="noopener"><em>英文原文快照</em></a></p><hr><!-- This document is a description of the Fuchsia Interface Definition Language(FIDL) purpose, high-level goals, and requirements.--><p>这个文档的目的是用来描述Fuchsia接口定义语言（FIDL）的高层次的目标与需求。<br><!--  Related Documents   [FIDL: Wire Format Specification]   [FIDL: Language Specification]   [FIDL: Compiler Specification]   [FIDL: C Language Bindings]   [FIDL: C++ Language Bindings]   [FIDL Examples]: Some small example code used during development--></p><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li>[FIDL: 数据格式说明书]</li><li>[FIDL: 语言说明书]</li><li>[FIDL: 编译说明书]</li><li>[FIDL: 绑定C语言]</li><li>[FIDL: 绑定C++语言]</li><li>[FIDL 例子]: 开发中的一些小例子</li></ul><p>[TOC]</p><!--Overview--><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><!--The Fuchsia Interface Definition Language (FIDL) is the language used todescribe interprocess communication (IPC) protocols used by programs running onthe Fuchsia Operating System. FIDL is supported by a toolchain (compiler) andruntime support libraries (bindings) to help developers use IPC effectively.--><p>Fuchsia接口定义语言（FIDL）是用来描述Fuchsia操作系统中进程间通信协议（IPC）的语言。FIDL支持工具链（编译）并且支持时支持库(绑定)来帮助开发者高效的使用IPC。</p><!--Goals--><p>目标</p><!--Fuchsia extensively relies on IPC since it has a microkernel architecturewherein most functionality is implemented in user space outside of the kernel,including privileged components such as device drivers. Consequently the IPCmechanism must be efficient, deterministic, robust, and easy to use.--><p>自从Fuchsia有微内核(大部分功能在用户空间实现)后，Fuchsia广泛依赖IPC，包括就像设备驱动的特权组件。因此,IPC机制必须有高效性，确定性，稳健性，易用性。</p><!--**IPC efficiency** pertains to the computational overhead required to generate,transfer, and consume messages between processes. IPC will be involved in allaspects of system operation so it must be efficient. The FIDL compiler mustgenerate tight code without excess indirection or hidden costs. It should be atleast as good as hand-rolled code would be where it matters most.--><p><strong>IPC 高效性</strong> 考虑生成，传输，进程间使用消息所需的计算开销. IPC将涉及所有的系统操作，所以它必须高效。FIDL的编译器必须生成严谨的代码，没有额外的迂回或者隐形成本。 这是最重要的，它应该至少要你hand-rolled代码一样好。<br><!--**IPC determinism** pertains to the ability to perform transactions within aknown resource envelope. IPC will be used extensively by critical systemservices such as filesystems which serve many clients and which must perform inpredictable ways. The FIDL wire format must offer strong static guarantees suchas ensuring that structure size and layout is invariant thereby alleviating theneed for dynamic memory allocation or complex validation rules.--><br><strong>IPC 确定性</strong> 考虑已有封装资源的执行事务的能力。IPC将被广泛的用于关键系统服务，就像有许多客户端的文件系统，必须照预想的方式工作。FIDL的协议格式必须提供强保证，确保结构体大小与布局是不变的，从而减轻了对动态内存分配或者是复杂验证规则的需求。<br><!--**IPC robustness** pertains to the need to consider IPC as an essential part ofthe operating system's ABI. Maintaining binary stability is crucial. Mechanismsfor protocol evolution must be designed conservatively so as not to violate theinvariants of existing services and their clients, particularly when the needfor determinism is also considered. The FIDL bindings must perform effective,lightweight, and strict validation.--><br><strong>IPC 稳健性</strong> 考虑IPC作为操作系统ABI的重要组成部分。保持二进制稳定性至关重要. 协议演变的机制必须保守设计，以便使现在服务与他们的客户端保持不变，特别是稳健性的需求也要考虑。 FIDL绑定必须高效，轻量并且经过严格验证。<br><!--**IPC ease of use** pertains to the fact that IPC protocols are an essentialpart of the operating system's API. It is important to provide good developerergonomics for accessing services via IPC. The FIDL code generator removes theburden of writing IPC bindings by hand. Moreover, the FIDL code generator canproduce different bindings to suit the needs of different audiences and theiridioms.--><br><strong>IPC 易用性</strong> 考虑IPC作为操作系统API的重要组成部分。通过IPC访问服务提供好的开发者生物工程学是很重要的。FIDL生成器减轻了手工编写IPC绑定代码的负担。 此外，FIDI代码生成器可以提供不同的绑定来适应不同开发者以及他们的风格。<br><!--TODO: express goal of meeting the needs of different audiences usingappropriately tailored bindings, eg. system programming native vs. event-drivendispatch vs. async calls, etc... say more things about FIDL as our system API,SDK concerns, etc.--><br>TODO: 解释不同受众的目标 使用合适的定制绑定,例如 本地系统编程 vs. 事件驱动调度 vs. 异步调用, 等等… 关于更多FIDI作为我们系统API,影响SDK等.</p><!--Requirements--><p>需求<br><!--Purpose--></p><h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><!--*   Describe data structures and interfaces used by IPC protocols on Zircon.*   Optimized for interprocess communication only; FIDL must not be persisted to    disk or used for network transfer across device boundaries.*   Efficiently transport messages consisting of data (bytes) and capabilities    (handles) over Zircon channels between processes running on the same    device.*   Designed specifically to facilitate effective use of Zircon primitives; not    intended for use on other platforms; not portable.*   Offers convenient APIs for creating, sending, receiving, and consuming    messages.*   Perform sufficient validation to maintain protocol invariants (but no more    than that).--><ul><li>描述用于Zircon的IPC协议的数据结构与接口。</li><li>只对进程间通信进行优化; FIDL一定不能用于磁盘或者跨设备边界的网络传输。</li><li>同一设备上进程间的有效传输消息由数据(字节)与Zircon中处理通道的能力组成。</li><li>专为Zircon原语的有效使用而设计；不打算在其它平台上使用，不可移植。</li><li>为创建，发送，接收与消费消息提供方便的API。</li><li>执行足够的验证来维护协议不变。<!--# Efficiency--></li></ul><h1 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h1><!--*   Just as efficient (speed and memory) as using hand-rolled data structures    would be.*   Wire format uses uncompressed native datatypes with host-endianness and    correct alignment to support in-place access of message contents.*   No dynamic memory allocation is required to produce or to consume messages    when their size is statically known or bounded.*   Explicitly handle ownership with move-only semantics.*   Data structure packing order is canonical, unambiguous, and has minimum    padding.*   Avoid back-patching pointers.*   Avoid expensive validation.*   Avoid calculations which may overflow.*   Leverage pipelining of interface requests for asynchronous operation.*   Structures are fixed size; variable-size data is stored out-of-line.*   Structures are not self-described; FIDL files describe their contents.*   No versioning of structures, but interfaces can be extended with new methods    for protocol evolution.--><ul><li>与使用手动定义数据结果一样高效（速度与内存）。</li><li>Wire format使用未压缩的本地数据类型，与主机大小端无关并且正确数据对齐来支持消息随时访问。</li><li>当消费消息时，如果消息大小已确定或者已知最大值，不需要动态内存分配.</li><li>Explicitly handle ownership with move-only semantics.</li><li>数据结构打包顺序是规范的，明确没有歧义的，并且是最小的。</li><li>避免反向修改指针.</li><li>避免损耗性能的验证.</li><li>避免可能溢出的计算.</li><li>利用异步操作接口操作管道。</li><li>结构体固定大小；可变大小的数据被存储在外.</li><li>结构体不能自我描述；FIDL文件将描述结构体的内容.</li><li>结构没有版本，但是根据协议接口可以扩展。</li></ul><!--# Ergonomics--><h1 id="人类工程学"><a href="#人类工程学" class="headerlink" title="人类工程学"></a>人类工程学</h1><!--*   Programming language bindings maintained by Fuchsia team:    *   C, C++ (native), C++ (idiomatic), Dart, Go, Rust*   Keeping in mind we might want to support other languages in the future, such    as:    *   Java, Javascript, etc.*   The bindings and generated code are available in native or idiomatic flavors    depending on the intended application.*   Use compile-time code generation to optimize message serialization,    deserialization, and validation.*   FIDL syntax is familiar, easily accessible, and programming language    agnostic.*   FIDL provides a library system to simplify deployment and use by other    developers.*   FIDL expresses the most common data types needed for system APIs; it does    not seek to provide a comprehensive one-to-one mapping of all types offered    by all programming languages.--><ul><li>Fuchsia团队来维护编程语言的绑定:<ul><li>C, C++ (native), C++ (idiomatic), Dart, Go, Rust</li></ul></li><li>记住，我们希望去支持更多语言，就像:<ul><li>Java, Javascript, etc.</li></ul></li><li>绑定与代码生成根据原定的用途适应原有的风格。</li><li>在编译时生成代码，优化消息序列，反序列化，并且验证。</li><li>FIDL语法是熟悉的，易于访问的，并且编程语言不可知。</li><li>FIDL提供一个库来简化其它开发者的部署与使用。</li><li>FIDL表述系统API所需要的最常见的数据类型；它不寻求提供支持所有编程语言一对一的全面映射。<!--# Implementation--></li></ul><h1 id="实现性"><a href="#实现性" class="headerlink" title="实现性"></a>实现性</h1><!--*   Compiler is written in C++ to be usable by components built in Zircon.*   Compiler is portable and can be built with a host toolchain.*   We will not support FIDL bindings for any platform other than Fuchsia.--><ul><li><p>编译器使用C++编写，用来在Zircon中构建组件。</p></li><li><p>编译是可移植的，并且可以和宿主工具来构建.</p></li><li><p>我们不会在Fuchsia以外的平台支持FIDL绑定。</p><!--## Where to Find the Code--></li></ul><h2 id="代码位置"><a href="#代码位置" class="headerlink" title="代码位置"></a>代码位置</h2><ul><li><a href="../../system/host/fidl">The compiler</a></li><li><a href="../../system/ulib/fidl">C bindings</a></li><li><a href="https://fuchsia.googlesource.com/garnet/+/master/public/lib/fidl/cpp" target="_blank" rel="noopener">C++ bindings</a></li><li><a href="https://fuchsia.googlesource.com/garnet/+/master/public/lib/fidl/go" target="_blank" rel="noopener">Go bindings</a></li><li><a href="https://fuchsia.googlesource.com/garnet/+/master/public/lib/fidl/rust" target="_blank" rel="noopener">Rust bindings</a></li></ul><!--## Constituent Parts of Specification--><h2 id="说明书的组成部分"><a href="#说明书的组成部分" class="headerlink" title="说明书的组成部分"></a>说明书的组成部分</h2><!--### FIDL Wire Format--><h3 id="FIDL线格式"><a href="#FIDL线格式" class="headerlink" title="FIDL线格式"></a>FIDL线格式</h3><!--The FIDL wire format specified how FIDL messages are represented in memory fortransmission over IPC.The fidl wire format is documented [FIDL: Wire Format Specification].--><p>FIDL线格式定义了为了IPC传输的FIDL消息是如何在内存中表示的。</p><p>FIDL数据格式的文档 [FIDL: Wire Format Specification].</p><!--### FIDL Language--><h3 id="FIDL-语言"><a href="#FIDL-语言" class="headerlink" title="FIDL 语言"></a>FIDL 语言</h3><!--The FIDL language is the syntax by which interfaces are described in ***.fidl**files.The fidl language is documented [FIDL: Language Specification].--><p>FIDL语言是<strong><em>.fidl</em></strong>文件语法来描述的接口。.</p><p>FIDL语言的文档 [FIDL: Language Specification].<br><!-- FIDL Compiler--></p><h3 id="FIDL-编译器"><a href="#FIDL-编译器" class="headerlink" title="FIDL 编译器"></a>FIDL 编译器</h3><!--The FIDL compiler generates code for programs to use and implement interfacesdescribed by the FIDL language.The fidl compiler is documented [FIDL: Compiler Specification].--><p>FIDL编译器为使用与实现FIDL接口的程序生成代码.</p><p>FIDL编译器的文档 [FIDL: Compiler Specification].<br><!-- FIDL Bindings--></p><h3 id="FIDL-绑定"><a href="#FIDL-绑定" class="headerlink" title="FIDL 绑定"></a>FIDL 绑定</h3><!--FIDL bindings are language-specific runtime support libraries and codegenerators which provide APIs for manipulating FIDL data structures andinterfaces.--><p>FIDL绑定是特定于语言的运行时支持库与代码生成器，这些代码生成器提供用于操纵FIDL数据结构和接口的API。<br>&lt;!–<br>Languages-specific topics:</p><ul><li>[FIDL: C Language Bindings]</li><li><p>[FIDL: C++ Language Bindings]<br>–&gt;<br>特定语言主题:</p></li><li><p>[FIDL: C Language Bindings]</p></li><li>[FIDL: C++ Language Bindings]<!--Bindings are available in various flavors depending on the language:-->绑定的类型根据语言不同而不同:</li></ul><!--   Native bindings: designed for highly sensitive contexts such as device    drivers and high-throughput servers, leverage in-place access, avoid memory    allocation, but may require somewhat more awareness of the constraints of    the protocol on the part of the developer.--><ul><li><strong>本地绑定</strong>: 为高度敏感的上下文（如设备驱动与高吞吐量的服务器）设计，充分利用就地访问，避免内存分配，但是可能需要更多的了解开发者协议限制。</li></ul><!--    Idiomatic bindings: designed to be more developer-friendly by copying    data from the wire format into easier to use data types (such as heap-backed    strings or vectors), but correspondingly somewhat less efficient as a    result.--><ul><li><strong>惯用绑定</strong>: 通过将数据从线格式拷贝到易于使用的类型（就像堆备份定字符串或者vectors），因此设计更开发者友好，但是相应的效率较低。</li></ul><!--Bindings offer several various ways of invoking interface methods depending onthe language:--><p>绑定提供了根据不同语言调用接口的多种方法:</p><!--    Send/receive: read or write messages directly to a channel, no built-in    wait loop (C)    Callback-based**: received messages are dispatched asynchronously as    callbacks on an event loop (C++, Dart)    Port-based: received messages are delivered to a port or future (Rust)    Synchronous call**: waits for reply and return it (Go, C++ unit tests)--><ul><li><strong>发送/接收</strong>: 直接读写消息到通道，没有内部等待循环 (C)</li><li><strong>基于回调</strong>: 异步接收消息作为事件循环的回调 (C++, Dart)</li><li><strong>基于端口</strong>: 接收的消息传递到端口或下辈 (Rust)</li><li><strong>同步调用</strong>: 等待应答才返回 (Go, C++ unit tests)</li></ul><!--Bindings provide some or all of the following principal operations:--><p>绑定提供以下操作的部分或全部:</p><!--*   **Encode**: in-place transform native data structures into the wire format    (coupled with validation)*   **Decode**: in-place transform wire format data into native data structures    (coupled with validation)*   **Copy/Move To Idiomatic Form**: copy contents of native data structures    into idiomatic data structures, handles are moved*   **Copy/Move To Native Form**: copy contents of idiomatic data structures    into native data structures, handles are moved*   **Clone**: copy native or idiomatic data structures (that do not contain    move-only types)*   **Call**: invoke interface method--><ul><li><strong>编码</strong>: 将本机数据结构转换为线格式 (与验证相结合)</li><li><strong>解码</strong>: 将线格式转换为本机数据结构 (与验证相结合)</li><li><strong>复制/移动到惯用格式</strong>: 把本机数据结构的内容复制到惯用数据结构中，操作会被移除。</li><li><strong>复制/移动到本机格式</strong>: 把惯用数据结构的内容复制到本机数据结构中，操作会被移除。</li><li><strong>克隆</strong>: 复制本机或惯用数据结构 (不包含只移动的类型)</li><li><strong>调用</strong>: 调用接口方法</li></ul><!--Workflow--><h2 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h2><!--This section describes the workflow of authors, publishers, and consumers of IPCprotocols described using FIDL.--><p>这个章节介绍了IPC协议的作者，发布者，使用者的工作流。<br><!-- Authoring FIDL--></p><h1 id="创作-FIDL"><a href="#创作-FIDL" class="headerlink" title="创作 FIDL"></a>创作 FIDL</h1><!--The author of a FIDL based protocol creates one or more ***.fidl files** todescribe their data structures and interfaces.--><p>作者基于FIDL协议创作一个或多个<strong><em>.fidl 文件</em></strong> 来描述他们的数据结构与接口。</p><!--FIDL files are grouped into one or more **FIDL libraries** by the author. Eachlibrary represents a group of logically related functionality with a uniquelibrary name. FIDL files within the same library implicitly have access to allother declarations within the same library. The order of declarations within theFIDL files that make up a library is not significant.--><p>作者将FIDL文件分组为一个或多个<strong>FIDL 库</strong>。每个库表示一组逻辑相关的功能，并具有唯一命名。 在同一个库中的FIDL文件可以访问库中其它FIDL文件。FIDL文件中的声明顺序并不重要。</p><!--FIDL files of one library can access declarations within another FIDL library by**importing** the other FIDL module. Importing other FIDL libraries makes theirsymbols available for use thereby enabling the construction of protocols derivedfrom them. Imported symbols must be qualified by the library name or by an aliasto prevent namespace collisions.--><p>一个FIDL库中的FIDL文件通过<strong>importing</strong>声明可以访问另一个库中的模块。导入其它库使他们的符号可供使用，从而可以构建他们的派生协议。导入的空号必须通过库名或加名来限定，以防止命名空间冲突。</p><!--# Publishing FIDL--><h1 id="发布-FIDL"><a href="#发布-FIDL" class="headerlink" title="发布 FIDL"></a>发布 FIDL</h1><!--The publisher of a FIDL based protocol is responsible for making FIDL librariesavailable to consumers. For example, the author may disseminate FIDL libraries ina public source repository or distribute them as part of an SDK.--><p>基于FIDL协议的发布者负责向使用者提供FIDL库。例如, 作者可以在公共源中分者FIDL库，或者将他们分发为SDK中的一部分。</p><!--Consumers need only point the FIDL compiler at the directory which contains theFIDL files for a library (and its dependencies) to generate code for thatlibrary. The precise details for how this is done will generally be addressed bythe consumer's build system.--><p>使用者只需要在FIDL目录中指向FIDL编译器，该目录包含库中的FIDL文件(与他们的依赖项)。 这项工作的具体细节通常将由使用者的构建系统来解决。</p><!--# Consuming FIDL--><h1 id="使用-FIDL"><a href="#使用-FIDL" class="headerlink" title="使用 FIDL"></a>使用 FIDL</h1><!--The consumer of a FIDL based protocol uses the FIDL compiler to generate codesuitable for use with their language runtime specific bindings. For certainlanguage runtimes, the consumer may have a choice of a few different flavors ofgenerated code all of which are interoperable at the wire format level butperhaps not at the source level.--><p>基于FIDL协议的使用者使用FIDL编译器生成适用于他们语言运行时特定绑定的代码。 对于某些语言运行时，使用者需要选择几种不同的代码开成类型，他们可以在线格式上相互操作，但可能不在源码级别。</p><!--In the Fuchsia world build environment, generating code from FIDL libraries willbe done automatically for all relevant languages by individual FIDL buildtargets for each library.--><p>在Fuchsia世界构建环境中，FIDL库生成代码将自动为每个相关的语言通过每个FIDL构建目标自动完成。</p><!--In the Fuchsia SDK environment, generating code from FIDL libraries will be doneas part of compiling the applications which use them.--><p>在Fuchsia SDK环境中，从FIDL库中生成代码将作为编译使用他们的应用程序的一部分。</p><p>文章为博主原创，转载请注明出处 <a href="http://www.crazyqq.com/posts/1/">http://www.crazyqq.com/posts/1/</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/fuchsia-mirror/zircon/blob/00faaac908ed4c5a59bfab95b6831b33df6a5cb0/docs/fidl/index.md&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
    
  </entry>
  
</feed>
